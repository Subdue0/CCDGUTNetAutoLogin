#!/usr/bin/python
#coding=utf-8




import os
import sys
# 外网登录密码加密模块
import base64
		# HTTP模块
import urllib
import urllib2
# 第三方库，需用pip安装，pip install pillow
from PIL import Image




LOG = []
IP = []




class Code():
	def __init__(self, name):
		self.name = name
		
		
	def import_code_photo(self):
		img = Image.open(self.name)
		return img
		
		
	def code_photo_processing(self):
		img = self.import_code_photo()
		# 模式L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。
		Img = img.convert('L')
		# 自定义灰度界限（阈值0~255）
		threshold = 180
		table = []
		for i in range(256):
			if i < threshold:
				table.append(0)
			else:
				table.append(1)
		# 图片二值化
		photo = Img.point(table, '1')
		return photo
		
		
	def each_number_feature(self):
		# 单个验证码数字（0-9）验证码二值化
		number_list = [
						# 数字0，第一个位置，y（3,16）x（7,16）
						[1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1],
						# 数字1，第一个位置，y（3,16）x（7,16）
						[1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
						# 数字2，第二个位置，y（3,16）x（20,29）
						[1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
						# 数字3，第三个位置，y（3,16）x（33,42）
						[1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1],
						# 数字4，第四个位置，y（3,16）x（46,55）
						[1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1],
						# 数字5，第三个位置，y（3,16）x（33,42）
						[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1],
						# 数字6，第二个位置，y（3,16）x（20,29）
						[1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1],
						# 数字7，第三个位置，y（3,16）x（33,42）
						[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1],
						# 数字8，第四个位置，y（3,16）x（46,55）
						[1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1],
						# 数字9，第一个位置，y（3,16）x（7,16）			
						[1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1]
					]
		return number_list
		
		
	def code_number_processing(self, photo, number_list):
		pixel_position_list = [[7,16],[20,29],[33,42],[46,55]]
		code_list = []
		# 四次循环，每一次处理一个验证码数字
		for i in range(4):
			# 四个验证码未知数字
			unknown_number = []
			for y in range(3, 16):
				for x in range(pixel_position_list[i][0], pixel_position_list[i][1]):
					unknown_number.append(photo.getpixel((x,y)))		
			# 从0到9遍历每个数字的特征
			for	row in range(10):
				count = 0
				# 117为每个验证码数字所占最大的面积点
				for col in range(117):
					if unknown_number[col] == number_list[row][col]:
						count += 1
				# 105为相似度，117就是100%相似，也就是完全匹配
				if count > 105:
					code_list.append(str(row))
		# 将列表中的验证码转换成字符串
		code_str = ''.join(code_list)
		# 验证码识别出结果后，删除图片
		os.remove(self.name)
		return code_str
		
		
	def recognize(self):
		photo = self.code_photo_processing()
		number_list = self.each_number_feature()
		code_str = self.code_number_processing(photo, number_list)
		return code_str
		
		
		
		
class Login():
	def __init__(self, intranet_username, intranet_password, extranet_username, extranet_password):
		# 内网登录用户名及密码
		self.intranet_username = intranet_username
		self.intranet_password = intranet_password
		# 外网登录用户名及密码
		self.extranet_username = extranet_username
		self.extranet_password = extranet_password
		
		
	def connection_check(self):
		try:
			url = 'http://www.offer4u.cn/ping'
			req = urllib2.Request(url)
			req.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36')
			res = urllib2.urlopen(req)
			if res.code == 204:
				# 网络正常
				return res.code
			elif res.code == 200:
				# 获取Location的值
				location = res.url
				if location == 'http://192.168.100.1/':
					# 内网未认证
					return 0
				else:
					# 外网未认证
					return 1
			else:
				# 未知状态码
				return res.code
		except:
			# 网络异常
			return -1
			
			
	def intranet_login(self):
		try:
			url = 'http://192.168.100.1/a70.htm'
			data_dict = {'DDDDD':self.intranet_username,'upass':self.intranet_password,'R1':'0','0MKKey':'123456'}
			#使用urlencode将字典参数序列化成字符串
			data_str = urllib.urlencode(data_dict)
			req = urllib2.Request(url)
			req.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36')
			urllib2.urlopen(req,data=data_str)
			return 1
		except:
			# 捕获内网认证模块异常
			return -1
			
			
	def get_cookie(self, res):
		# 取cookie值
		cookie_value = res.headers['Set-Cookie']
		# 分割cookie值
		cookie_list = cookie_value.split(';')
		# 保留所需cookie值
		cookie = cookie_list[0]
		return cookie
		
		
	def get_image(self, res):
		with open('code.jpg','wb') as imgfile:
			imgfile.write(res.read())
			
			
	def req_recognize_code(self):
		url = 'http://enet.10000.gd.cn:10001/common/image.jsp'
		req = urllib2.Request(url)
		req.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36')
		res = urllib2.urlopen(req)	
		# 获取cookie
		cookie = self.get_cookie(res)
		# 下载验证码图片到本地
		self.get_image(res)
		# 识别验证码
		c = Code('code.jpg')
		code = c.recognize()
		return (cookie, code)
		
		
	def get_ip(self):
		url = 'http://www.offer4u.cn/ping'
		req = urllib2.Request(url)
		req.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36')
		res = urllib2.urlopen(req)
		# 获取Location的值
		location_value = res.url
		# 切割value值
		IP.append(location_value.split('=')[1].split('&')[0])
		IP.append(location_value.split('=')[2])
		return IP[0], IP[1]
		
		
	def extranet_login(self):
		try:
			url = 'http://enet.10000.gd.cn:10001/login.do'
			encodestr = base64.b64encode(str(self.extranet_password).encode()).decode()
			cookie, code = self.req_recognize_code()
			eduuser, edubas = self.get_ip()
			data_dict = {
				'userName1':self.extranet_username,
				'password1':encodestr,
				'rand':code,
				'eduuser':eduuser,
				'edubas':edubas
			}
			#使用urlencode将字典参数序列化成字符串
			data_str = urllib.urlencode(data_dict)
			headers = {
						'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
						'Cookie': cookie
					}
			req = urllib2.Request(url=url, data=data_str, headers=headers)
			res = urllib2.urlopen(req)
			location_value = res.url
			status = location_value.split('/')[3].split('.')[0]
			if status == 'success':
				return 1
			else:
				return 0
		except:
			# 捕获外网认证模块异常
			return -1
			
			
			
			
def login(intranet_username, intranet_password, extranet_username, extranet_password):
	l = Login(intranet_username, intranet_password, extranet_username, extranet_password)
	intranet_status = l.connection_check()
	'''
########################################################################################
				需要登录
########################################################################################
	'''
	# 多数情况，没有进行内网认证和外网认证，等待内网认证和外网认证
	if intranet_status == 0:
		if l.intranet_login() == 1:
			intranet_status = l.connection_check()
			# 内网认证通过，无需外网认证，网络已连通
			if intranet_status == 204:
				LOG.append('内网登录成功！网络已经连通！')
				return 2
			 # 通过了内网认证，外网等待认证
			elif intranet_status == 1:
				# 通过了内网认证，外网认证，网络已连通
				extranet_status = l.extranet_login()
				if extranet_status == 1:
					LOG.append('内网登录成功！外网登录成功！网络已经连通！')
					return 1
				elif extranet_status == -1:
					LOG.append('**内网登录成功！外网认证模块出现异常。**')
					return -2
				# 通过了内网认证，外网认证账号或密码错误
				else:
					LOG.append('**内网登录成功！外网登录失败。请检查天翼校园网的手机号和密码！如果确认无误，请尝试多登录几次。**')
					return 3
			# 内网认证失败，学号或者密码不对
			elif intranet_status == 0:
				LOG.append('**内网登录失败。1、账号被注销，等一会儿路由器会自动重新认证联网。2、学号或者密码不正确，请检查！**')
				return -1
			# 未知状态码的拦截
			else:
				LOG.append('**内网正常登录后，http://www.offer4u.cn/ping返回异常状态码'+str(intranet_status)+'。**')
				return -1
		else:
			LOG.append('**内网认证模块出现异常。**')
			return -2
	# 内网认证已经通过，等待外网认证
	elif intranet_status == 1:
		extranet_status = l.extranet_login()
		if extranet_status == 1:
			LOG.append('外网登录成功！网络已连通！')
			return 1
		elif extranet_status == -1:
			LOG.append('**外网认证模块出现异常。**')
			return -2
		else:
			LOG.append('**外网登录失败。外网登录失败。请检查天翼校园网的手机号和密码！**')
			return -1
		'''
########################################################################################
				无需登录
########################################################################################
		'''
	# 网络正常
	elif intranet_status == 204:
		LOG.append('网络已连通！')
		return 0
	# 异常退出
	elif intranet_status == -1:
		LOG.append('**路由器没有插入网线或者路由器网线插错位置，请检查！**')
		return -1
	# 特殊状态码的拦截
	else:
		LOG.append('**未进行任何内外网认证时，http://www.offer4u.cn/ping返回异常状态码'+str(intranet_status)+'。**')
		return -1
		
		
		
		
if __name__=='__main__':
	'''
########################################################################################
				登录校园网
########################################################################################
	'''
	
	login(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
	
	
	'''
########################################################################################
				推送日志
########################################################################################
	'''
	
	login_log_info = "".join(LOG)
	os.system('logger -t login_log ==================================================================================================')
	os.system('logger -t login_log %s' %(login_log_info))
	os.system('logger -t login_log ==================================================================================================')