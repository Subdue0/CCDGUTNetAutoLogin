#!/usr/bin/python
#coding=utf-8



import re
import os
import sys
import time
		# 外网登录密码加密模块
# 第三方库，需用pip安装，pip install rsa
import rsa
import binascii
			# 第三方库
# 需用pip安装，pip install requests
import requests
# 需用pip安装，pip install pillow
from PIL import Image




LOG = []
IP = []
CODE_SAMPLE = {
	"1": {
			"0": "111000111100000001100111001001111100001111100001111100001111100001111100001111100001111100100111001100000001111000111",
			"1": "111000111100000111100000111111100111111100111111100111111100111111100111111100101111100011111100110100000000100000000",
			"2": "100000111000000011011111001111111001111111001111110011111100111111001111110011111100111111001111111000000001000000001",
			"3": "100000111000000001011111001111111001111110011100000111100000010111110001111100000110011001011100001000000011100000111",
			"4": "111100011111100011111100011111000011110010011110010011100110011100110001000000000000000000111110010111110011111110011",
			"5": "000000001000000001001111111001111111001111111000001111000000011111010000111111001111111001011110001000000011100000111",
			"6": "111000011110000001100111101100000000000111111001000011000000001000111000001000100001111100100111000100000001111000011",
			"7": "100000000100000000111111100000111101111000001111110010111110111111100111111101111111001111111001111110011111110011000",
			"8": "110000011100000001100111001100111001100011011110000011110000011100110001001111100001111100000111000100000001110000011",
			"9": "110000111100000001000111001001111100001111100000111000100000000100000000111111000111111001101111001100000011000000000",
			"A": "000000000111000111110010011110010011110010011100111001000000001100111000000000000000000000001111100011111110011111110",
			"B": "000000111000000011001110011001110011001100111000001111000000111001110011001111001001111001001110001000000011000000110",
			"C": "111000001110000000100011110000111111001111111000111111001011111001101111001110111000111111100011110110000000111000001",
			"D": "000000011000000001001111000001111100001111110001111110001111110001111110001111110001111100001111000000000001000000011",
			"E": "000000001000000001001100000001111111001111111000000011000000011001111111001111111001111111001111111000000001000000001",
			"F": "000000000000000011001111111001111111001111111001111111000000111000000111001111111001111111001111111001111111001111111",
			"G": "111000000110000000100011111100111111001111111001111111001111111001111110001111110000111110100011110110000000111000000",
			"H": "001111100001111110001111110001111110000000000000000000000000000001111110001111110001111110001100000001111110001111110",
			"I": "",
			"J": "100111111100111111100111111100111111100111111100111111100111111100111111100111111100111111000001111100110000100111111",
			"K": "001111100001111001001110011001100101001100111001000000000001111001001111000000111001110000001111001001111100001111110",
			"L": "001111111000111111001111111001111111001111111001111111001111111001111111001111111001111111001111111000000001000000001",
			"M": "000111111000011111000011111000011111001001110001001110001001110001100100001100100001100100001110001001110001001111111",
			"N": "001111110000111110000011110000000000001001110001001110001100010001110000001110010001111000001111000001111100001111110",
			"O": "",
			"P": "000000111000000011001110001001111001001111001001110001000000011000001111001111111001111111001111111001111111001111111",
			"Q": "111000001110000000100011100100111110001111111001111111001111111001111111001111111100111110100011100110000000111000001",
			"R": "000000111000000011001110001001111001001111001001110001000000011000000111001100111001110011001111001001111100001111110",
			"S": "100001111000000111001110111001110100000111101100011101110000110111100011111110011111110011011110011000000111100001111",
			"T": "000000000000000000111001111111001111110000000111001111111001111111001111111001111111001111111001111111001000111001111",
			"U": "001111100001111100001111100001111100001111100001111100001111100001111100001111100001111100000111000100000000000000011",
			"V": "011111110011111110001111100001111100100111001100111001100111000110000011110010011000010011111000111111000111111111111",
			"W": "011110001011110001001110001001110101001100100001100100100100100100100100100100100100101100110001110110001110110001110",
			"X": "011111100001111001001111001100110011110000111110000111111001111110000111110000100000110011000001001001001001011110100",
			"Y": "011111000001100001001011001100110011000110011110000111011001111100001111111000111111001101111001111111001111111111111",
			"Z": "000000001000000001111111001111110011111100111111100111111001111110011111110011111100111111001111111000000001000000001"
	},
	"2": {
			"0": "111000111111100000001111100111001111001111100111001111100111001111100111001111100111001111100111001111100111001111100111100111001111100000001111111000111111",
			"1": "111000111111100000111111100000111111100100111111111000011111111100100011111100111100111100111111000000000000111100111111111100111111100000000111100000000111",
			"2": "100000111111000000011111011111001111111111001111111111001000111110011111111100111111111001111111110011111111100111111111001111111111000000001111000000001111",
			"3": "100000111111000000000000011111000000111111001111111110011111100000111111100000011111111110000011111111001100111111001111011110001111000000011111100000111111",
			"4": "111110011111111100011111111100011111111000011111110010011111110010011111100110011111100110011111000000000111000000000111111110011111111110011111111110011111",
			"5": "000000001111000000001111001111111111001111111111001111111111000001111111000000011111111110000001111111001110111111001111001110001111000000011111100000111111",
			"6": "111000011111110000001111100111101111000111111111000000000000001000000111000000001100000111000111001111100111001111100111100111000111100000001111111000011111",
			"7": "100000000111100000000111111111100111111111101111111111001111111110011111111110111111111100111110111101111001111001010100111000000011000001111111010011111111",
			"8": "110000011111100000001111100111001111100111000000000000011111110000011111110000010111100110001111001111100111001111100111000011000111100000000011110000011100",
			"9": "110000100001100000001110000011001111001101100111001110100111000111000111100000000111110000100011111111100101111111001110101111001111100000011111110000111111",
			"A": "111000000111111000111000110010011111110010011111110010011111100111001111100111001111100111001111000000000111000000000111001111100111011111110011011111110011",
			"B": "000000110011000000011100001110011111001110011111001100111111000001111111000000111111001110011111001111001111001111001111001110001111000000011111000000111111",
			"C": "111000000111100000000011100000110100000111000111001111111000001111111111001111111111001111111111001111111111000111111111100011110111110000000111111000001111",
			"D": "000000011101000000000000000001000111001111100011001111100011001111010011001110110011001101110011001101110011001011100111001111000111000000001111000000011111",
			"E": "000000001111000000001111001111111111001111111111001111111111000000011111000000011110001111111111001111111111001111111111001111111111000000001111000000001111",
			"F": "000000011111000000011111001111111111001111111111001111111111001111111111000000111111000000111111001111111111001111111111001111111111001111111111001111111111",
			"G": "111000000111110000000011100011111000100000000011001111111111001111111111001111111111001111110011001111110011000111110011100011110011110000000011111000000111",
			"H": "001111110011001111110001001111110010001111110011001111110011000000000011000000000011001111110011001111110011001111110011001111110011001111110011000000000011",
			"I": "",
			"J": "100111111111100111111111100111111111100110001111000001111111100111111100100111110011100111101111100110011111100001111111100111111111000111111111100111111111",
			"K": "001111100111001111001111001110011111001100111111001100111111001001111000000011000111001000111111000100111111001110011111001111001111001111100111001111110011",
			"L": "001111111111000000000000001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111111000000001111000000001111",
			"M": "000111111100000011100000000010011000000011111000001001110010000000000000001001110010001100100110001100100110001100100110001110001110001110001110001111111110",
			"N": "001111110011000111110011000011110010000010110001001001110000001000000011001100110011001010010011000110010011001111000011001111000011001111100011000000000011",
			"O": "",
			"P": "000000111111000000011111001110001111001111001111001111001111001110001111000000011111000001111111001111111111001111111111001111111111001111111111001111111111",
			"Q": "111000001111110000000111100011100011100111110001001111111001001111111001001111111001001111111001001111111001100111110001100011100011110000000111111000001111",
			"R": "000000111111000000011111001100001111001101001111001110001100001110000011000000011111000000011111001100101111001110011111001111001111001111100111001111110011",
			"S": "100001111111100000111111001110111111001111111111001111111111100011111111110000111111111100011111111110011111111110011111011110011111000000111111100001111110",
			"T": "000000000110000000000111011001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111111001111111",
			"U": "001111100111000000000111000011100000001111100111001111100111001111100111001111100111001111100111001111100111001111100111000111000111100000001111110000011111",
			"V": "011111110011011111110111000000000000001111100111000111001111100111001111100111001101110010010000110010001111000010011111111000111111111000111111111111111111",
			"W": "011110001111011110001111001110001110001110101110001100100110001100100110000000100100100100000000100100100100100101100100110001110001110001110001000001110001",
			"X": "011111100111001111001111001111001111100110011111110000111111110000111111111001111111110000111111110000111111100110011111001111001111001111001111011111100111",
			"Y": "011111100111001111001100001111001111100110010111100110001111110000101111111001011111111000111111111001111111111001111111111001111111110001111111111111111111",
			"Z": "000000001111000000001111111111001111111110011111111100111111111100111111111001111111110011111111110011111111100111111111001111111111000000001111000000001111"
	},
	"3": {
			"0": "111000111100000001100111001001111100001111100001111100001111100001111100001111100001111100100111001100000001111000111",
			"1": "111000111100000111100000111111100111111100111111100111111100111111100111111100111111100111111100111100000000100000000",
			"2": "100000111000000011011111001111111001111111001111110011111100111111001111110011111100111111001111111000000001000000001",
			"3": "100000111000000001011111001111111001111110011100000111000000011111110001111111001111111001011110001000000011100000111",
			"4": "111110011111100011111100011111000011000010011110000001100110010100110011000000000000000000111110011111110011111110011",
			"5": "000000001000000001001111111001111111001111111000001111000000011111110001111111001111111001011110001000000011100000111",
			"6": "011000000000000001000111101100111111001111111001000011000000001000111000001111100001111100000111000100000001011000000",
			"7": "000000000100000000111111100111111101111111001111110011111100000100000111111101111111001111111001111110011111000000000",
			"8": "110000011100000001100111001100111001100011011110000011000000000100110001001111100001111100000111000100000001110000001",
			"9": "110000111100000001000111001001111100001111100000111000100000000110000100111111100111111001101111001100000011110000111",
			"A": "111000000000000111110010011110010011110010011100101001100011001100111001000000000000000000000111100011111110011111110",
			"B": "000000111000000011001110011000110000001000001000001110000000111001110011001111001001111001001110001000000011000000111",
			"C": "111000001110000000100011110000111111001111111001111111001111111001111111001111111000111111100011110110000000111000001",
			"D": "000000011000000001001111000001111100000000010001111110001111100001110010000001110001111100001111000000000001000000011",
			"E": "000000001000000001001111111001111111000001111000000000000000011001111111001111111001111111001111111000000001000000001",
			"F": "000000011000000011001111111001111111000011111001101111000000011000000111001111111001111111001111111001111111001111111",
			"G": "111000000110000000100011111100111111001111111001111111001111111001111110001111110000111110100011110110000000111000000",
			"H": "001111110001111110001111110001111000001110110000000000000000000001111110001111110001111110001111110001111110001111110",
			"I": "",
			"J": "100111111100111111100111111100111111100111111100111111100111111100111111100111111100111111100111111100111111100111111",
			"K": "001111100001111001001110011001100111001100110001001110000011101001001101001100011001110000001001001001111100001111110",
			"L": "001111111001111111001111111001111111000111111001100101001111111001111111001111111001111111001111111000000001000000001",
			"M": "000111111000011111000011111000011111001001110001001110000001110001100100001100100001100100001110001001110001001111111",
			"N": "001111110000111110000011110000011110001001110001001110001100110001110010001110010001111000001111000001111100001111110",
			"O": "",
			"P": "000000111000000011001110001001111001001111001001110001000000011000001111001111111001111111001111111001111111001111111",
			"Q": "111000001110000000100011100100111110001111111001111111001111111001111111001111110100111100100011000110000000111000001",
			"R": "000000111000000011001110001001111001001111001001110001000000011000000111001100111001110011001111001001111100001111110",
			"S": "100001111000000111001110111001111111001111111100011111110000111111100011111110011111110011011110011000000111100001111",
			"T": "000000000000000000111000111111001111111001111111001111111001111111001111111001111111001111111001111111001111111001111",
			"U": "001111100001111100001111100001111100001111100001111100001111100001111100000111100001111100000111000100000001110000011",
			"V": "011111110011111110001111100001111100100111001100111001100111001110010011110010011110010011111000111111000111111111111",
			"W": "010110001011010001001100001001110001001100100001100100100100100100100100100100100100101100110001110110001110110001110",
			"X": "011111100001111001001111001100110011110000111110000111111001111110000000000000111100110011001111001001111001001111100",
			"Y": "011111100001111001001111001100110011100110011000000000111001111110001011111001111111001111111001000111000111000111111",
			"Z": "000000001000000001000000000111110011111100111111100111111000111110011111110011111100111111001111111000000001000000001"
	},
	"4": {
			"0": "1110001111100000001110011100110011111001001111100100111110010011111001001111100100111110010011111001100111001110000000111110001111",
			"1": "1110000000100000111100000011111111001111111100111111110011111111001111111100111111110011111111001111111100111100000000010000000001",
			"2": "1000001111000000011101111100111111110011111111001111111001111111001111111001111111001111111001111111001111111100000000110000000011",
			"3": "1000001111000000001101111100111111110011111110011110000011111000000111111110001111111100111111110011011110001100000001110000001111",
			"4": "1111100111111100011111110001111110000111110010011111001001111001100111100110011100000000010000000001111110011111111001111111100111",
			"5": "0000000011000000001100111111110011111111001111111100000111110000000111111110001111111100111111110011011110001100000001111000001111",
			"6": "1110000110110000001110011110111001111111001111111100100001110000000011000111000100111110010000000000100111000110000000111110000111",
			"7": "1000000001100000000111111110011111111011111111001111111001111111101111111100111111110111110010011111111001111111001001111100111001",
			"8": "1100000111100000001100011100111001110011100011011111000001111100000111100110001100111110010011111001000111000110000000111100000111",
			"9": "1100001111100000001100011100110011111001001111100100011100011000000001110000100111111110011111110011100000001110000001111100001111",
			"A": "1110001111111000111111001001111100100111110010011110011100110001110011100111001000000000000000000000001111100001111111000111111100",
			"B": "0000001111000000011100111001110011100111001100111100000111110000001111001110011100111100110011110011001110001100000001110000001111",
			"C": "0110000011010000000100001111010001111111001111111100111111110011111111001111111100111111110001111111100011110111000000011110000011",
			"D": "0000000111000000001100111100010011111000001111110000111111000011111100001111110000111111000011111001001111000100000000110000000111",
			"E": "0000000011000000001100111111110011111111001111111100000001110000000111001111111100111111110011111111001111111100000000110000000011",
			"F": "0000000111000000011100111111110011111111001111111100111111110000001111000000111100111111110011111111001111111100111111110011111111",
			"G": "1110000001110000000010001111101001111111001111111100111111110011111111000001110000111000000001111100100011110011000000001110000001",
			"H": "0011111100001110000000100111000001111100001111110000000000000000000000001111110000111111000011111100001111110000111111000011111100",
			"I": "",
			"J": "1001111111100111111110011111111001111111100111111110011111111001111111100111111100000011111001110000100111111110011111110001111111",
			"K": "0011111001001111001100111001110011001111001100111100100111110000111111001001111100110011110001100111001111001100111110010011111100",
			"L": "0011111111001111111100111111110011111111001111111100111111110011111111001111111100111111110011111111001111111100000000110000000011",
			"M": "0000000000000011111000001111100000111110001001110000100111000010011100001100100100110010010000000000001110001100111000110011111111",
			"N": "0011111100000111110000001111000000111100001001110000100111000011001100001110010000111001000011110000001111000000111110000001111100",
			"O": "",
			"P": "0000001111000000011100111000110011110011001111001100111000110000000111000001111100111111110011111111001111111100111111110011111111",
			"Q": "1110000011110000000110001110001001111100001111111000111111100011111110001111111000111111101001111100100011100011000000011110000011",
			"R": "0000001111000000011100111000110000010011001110000000000000110000000111000000111100110011110011100111001111001100111110010011111100",
			"S": "1000011111000000111100111011110011111111001111111110001111111100001111111100011111111001111111100111011110011100000011111000011111",
			"T": "0000000001000000000111100111111110011111111001111111100111111110011111001001111111100111111110011111111001111111100111111110011111",
			"U": "0011111001001111100100111110010011111001001111100100111110010011111001001111100100111110010011111001000111000100000000111100000111",
			"V": "0111111100011111110100111110010011111001100111001110011100111001110011110010011111001001111100100111111000111111100011111111111111",
			"W": "0111100011011110001100111000110011101011001100100100110010011001001001100100100110010010011001011001110001110011000111000000000000",
			"X": "0111111001001111001100111100111001100111110000111111000011111110011111110000111111000011111001100111001111001100111100110111111001",
			"Y": "0111111001001111001100111100111001100111100110011111000011111110011111111001111111100111111110011111111001111100000111111110000111",
			"Z": "0000000011000000001111111100111111100111111100111111110011001110000011110001111100001111111001111111001111111100000000110000000011"
	}
}




'''
数据分析：
O和I字母不出现，识别采用了取字符最大相似度的方法，确定最终的验证码（code），准确率99%以上
'''
def OCR(image_path):
	similarity = 0
	dict_max_similarity = {}
	count_similarity = 0
	code = ""
	
	list_code = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
	
	# 创建image对象
	img = Image.open(image_path)
	
	# 彩色图转化成灰度图
	Img = img.convert('L')
	# 验证码二值化
	threshold = 145
	table = []
	for i in range(256):
		if i < threshold:
			table.append(0)
		else:
			table.append(1)
	photo = Img.point(table, '1')
	
	# 验证码边界点
	# X轴：[[7,15], [20,31], [33,41], [46,55]]
	# Y轴：[3,15]
	pos_x = [[7,15], [20,31], [33,41], [46,55]]
	pos_y = [3, 15]
	for code_index in range(1, 5):
		start_x = pos_x[code_index - 1][0]
		end_x = pos_x[code_index - 1][1]
		start_y = pos_y[0]
		end_y = pos_y[1]
		
		# 存储二值化后的验证码
		code_value = ""
		for y in range(start_y, end_y + 1):
			for x in range(start_x, end_x + 1):
				code_value += str(photo.getpixel((x, y)))
				
		# 识别验证码
		for each_code in list_code:
			target_code_value = CODE_SAMPLE[str(code_index)][each_code]
			for code_value_index in range(len(code_value)):
				if code_value[code_value_index] == target_code_value[code_value_index]:
					count_similarity += 1
			# 计算相似度并保留两位小数
			similarity = round(count_similarity / len(code_value), 2)
			# 整型变量初始化
			count_similarity = 0
			# 字典变量赋值
			dict_max_similarity[each_code] = similarity
		for key,value in dict_max_similarity.items():
			if(value == max(dict_max_similarity.values())):
				code += key
				break
		# 字典变量初始化
		dict_max_similarity = {}
		
	return code
	
	
def useRsaEn(e, m, str):
	# e为exponent，将16进制字符串转换成10进制字符串, 常见16进制字符串'10001'=>10进制整数65537，m为modulus，将16进制字符串转换成10进制字符串
	e = int(e, 16)
	m = int(m, 16)
	
	# 用modulus和exponent生成rsa公钥
	key = rsa.PublicKey(m, e)
	
	# 将16进制字符串转换成16进制字节串
	str = bytes(str, encoding="utf8")
	
	# 使用rsa进行加密
	password = rsa.encrypt(str, key)
	
	# 将2进制字节串转换成16进制字节串
	password = binascii.b2a_hex(password)
	
	# 将16进制字节串转换成16进制字符串
	password = bytes.decode(password)
	
	return password
	
	
def wan_reconnect():
	url = 'http://192.168.1.1/'
	
	data = {
		'luci_username': 'root',
		'luci_password': 'admin'
	}
	
	headers = {
		'Host': '192.168.1.1',
		'Content-Type': 'application/x-www-form-urlencoded',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
	}
	
	response = requests.post(url, data = data, headers = headers, allow_redirects = False)
	cookie = response.headers['Set-Cookie']
	
	url = 'http://192.168.1.1/cgi-bin/luci/admin/network/network'
	
	headers = {
		'Host': '192.168.1.1',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
		'Cookie': cookie
	}
	
	response = requests.get(url, headers = headers)
	token = re.findall(r'{ token: \'(\w+)\' }', response.text)[0]
	
	url = 'http://192.168.1.1/cgi-bin/luci/admin/network/iface_reconnect/wan'
	
	data = {
		'token': token
	}
	
	headers = {
		'Host': '192.168.1.1',
		'Content-Type': 'application/x-www-form-urlencoded',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
		'Cookie': cookie
	}
	
	requests.post(url, data = data, headers = headers)
	
	
def air_led_switch(light):
	if light == 1:
		os.system('echo 1 > /sys/class/leds/blue\:wlan/brightness')
	else:
		os.system('echo 0 > /sys/class/leds/blue\:wlan/brightness')
		
		
def led_flashing():
	for i in range(10):
		os.system('echo 0 > /sys/class/leds/blue\:wlan/brightness')
		time.sleep(0.5)
		os.system('echo 1 > /sys/class/leds/blue\:wlan/brightness')
		time.sleep(0.5)
		
		
class Login():
	def __init__(self, intranet_username, intranet_password, extranet_username, extranet_password):
		# 内网登录用户名及密码
		self.intranet_username = intranet_username
		self.intranet_password = intranet_password
		# 外网登录用户名及密码
		self.extranet_username = extranet_username
		self.extranet_password = extranet_password
		
		
	def connection_check(self):
		try:
			# 这个网站非常特殊，网络连通的时候会返回204状态码
			url = 'http://www.offer4u.cn/ping'
			
			headers = {
				'Host': 'www.offer4u.cn',
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
			}
			
			# allow_redirects=False不自动重定向
			response = requests.get(url, headers = headers, allow_redirects = False, timeout = 1)
			# 302状态码，说明网络正常，等待认证登录，返回0或者1，0表示未通过内网认证，1表示通过内网认证
			if response.status_code == 302:
				# 获取Location的值
				values = response.headers['Location']
				if values == 'http://192.168.100.1':
					return 0
				else:
					return 1
			# 除了302状态码分状态，其余的状态码都原样返回
			else:
				return response.status_code
		except:
			# 捕获异常
			return -1
			
			
	def intranet_login(self):
		try:
			url = 'http://192.168.100.1/a70.htm'
			
			data = {
				'DDDDD':self.intranet_username,
				'upass':self.intranet_password,
				'R1':'0',
				'0MKKey':'123456'
			}
			
			headers = {
				'Host': '192.168.100.1',
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
			}
			
			requests.post(url, data = data, headers = headers)
			return 1
		except:
			# 捕获异常
			return -1
			
			
	def get_cookie(self, response):
		# 取cookie值
		values = response.headers['Set-Cookie']
		# 分割cookie值
		cookie_list = values.split(';')
		# 保留所需cookie值
		cookie = cookie_list[0]
		return cookie
			
			
	def get_image(self, response):
		with open('code.png','wb') as imgfile:
			imgfile.write(response.content)
			
			
	def request_identification_code(self):
		url = 'http://enet.10000.gd.cn:10001/common/image.jsp'
		
		headers = {
			'Host': 'enet.10000.gd.cn:10001',
			'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
		}
		
		response = requests.get(url, headers = headers)
		cookie_str = self.get_cookie(response)
		# 下载验证码图片到本地
		self.get_image(response)
		code_str = OCR('code.png')
		return cookie_str, code_str
		
	def get_ip(self):
		url = 'http://www.offer4u.cn/ping'
		
		headers = {
			'Host': 'www.offer4u.cn',
			'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'
		}
		
		# allow_redirects=False不自动重定向
		response = requests.get(url, headers = headers, allow_redirects=False)
		# 获取Location的值
		values = response.headers['Location']
		# 切割values值
		IP.append(values.split('=')[1].split('&')[0])
		IP.append(values.split('=')[2])
		return IP[0], IP[1]
		
	def extranet_login(self):
		try:
			url = 'http://enet.10000.gd.cn:10001/login.do'
			
			cookie, code = self.request_identification_code()
			eduuser, edubas = self.get_ip()
			loginKey = useRsaEn('10001', 'b2867727e19e1163cc084ea57b9fa8406a910c6703413fa7df96c1acdca7b983a262e005af35f9485d92cd4c622eca4a14d6fd818adca5cae73d9d228b4ef05d732b41fb85f80af578a150ebd9a2eb5ececb853372ca4731ca1c8686892987409be3247f9b26cae8e787d8c135fc0652ec0678a5eda0c3d95cc1741517c0c9c3', '{"userName":"' + self.extranet_username + '","password":"' + self.extranet_password + '","rand":"' + code + '"}')
			
			data = {
				'userName1': self.extranet_username,
				'password1': '',
				'rand': code,
				'eduuser': eduuser,
				'edubas': edubas,
				'loginKey': loginKey
			}
			
			headers = {
				'Host': 'enet.10000.gd.cn:10001',
				'Content-Type': 'application/x-www-form-urlencoded',
				'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
				'Cookie': cookie
			}
			
			# 根据抓包规律发现，外网登录需要发送两个相同数据包，如果第一个数据包服务器不接受，则再发送一个
			response = requests.post(url, data = data, headers = headers, allow_redirects = False)
			values = response.headers['Location']
			status = values.split('/')[3].split('.')[0]
			if status == 'success':
				return 1
			else:
				response = requests.post(url, data = data, headers = headers, allow_redirects = False)
				values = response.headers['Location']
				status = values.split('/')[3].split('.')[0]
				if status == 'success':
					return 1
				else:
					return 0
		except:
			# 捕获异常
			return -1
			
			
def login(intranet_username, intranet_password, extranet_username, extranet_password):
	l = Login(intranet_username, intranet_password, extranet_username, extranet_password)
	connection_status = l.connection_check()
	'''
########################################################################################
				需要登录
########################################################################################
	'''
	# 多数情况，没有进行内网认证和外网认证，等待内网认证和外网认证
	if connection_status == 0:
		if l.intranet_login() == 1:
			connection_status = l.connection_check()
			# 内网认证通过，无需外网认证，网络已连通
			if connection_status == 204:
				LOG.append('内网登录成功！网络已经连通！')
				led_flashing()
				return 2
			 # 通过了内网认证，外网等待认证
			elif connection_status == 1:
				# 通过了内网认证，外网认证，网络已连通
				extranet_status = l.extranet_login()
				if extranet_status == 1:
					LOG.append('内网登录成功！外网登录成功！网络已经连通！＾ω＾')
					led_flashing()
					return 1
				elif extranet_status == -1:
					LOG.append('**内网登录成功！外网认证模块出现异常。**')
					air_led_switch(0)
					return -2
				# 通过了内网认证，外网认证账号或密码错误
				else:
					LOG.append('**内网登录成功！外网登录失败。请检查天翼校园网的手机号和密码！如果确认无误，请尝试多登录几次。**')
					air_led_switch(0)
					return 3
			# 内网认证失败，1、账号被注销。2、学号或者密码不对。
			elif connection_status == 0:
				air_led_switch(0)
				return -4
			# 未知状态码的拦截
			else:
				LOG.append('**内网正常登录后，http://www.offer4u.cn/ping返回异常状态码' + str(connection_status) + '。**')
				air_led_switch(0)
				return -1
		else:
			LOG.append('**内网认证模块出现异常。**')
			air_led_switch(0)
			return -2
	# 内网认证已经通过，等待外网认证
	elif connection_status == 1:
		extranet_status = l.extranet_login()
		if extranet_status == 1:
			LOG.append('外网登录成功！网络已连通！')
			led_flashing()
			return 1
		elif extranet_status == -1:
			LOG.append('**外网认证模块出现异常。**')
			air_led_switch(0)
			return -2
		else:
			LOG.append('**外网登录失败。外网登录失败。请检查天翼校园网的手机号和密码！**')
			air_led_switch(0)
			return -1
		'''
########################################################################################
				无需登录
########################################################################################
		'''
	# 网络正常
	elif connection_status == 204:
		LOG.append('网络已连通！')
		air_led_switch(1)
		return 0
	# 异常退出
	elif connection_status == -1:
		LOG.append('**无法弹出登录页面，可能出现的状况：1、桌子下面的网线接口氧化。2、网线插错位置。3、未插入网线。**')
		air_led_switch(0)
		return -1
	# 特殊状态码的拦截
	else:
		LOG.append('**未进行任何内外网认证时，http://www.offer4u.cn/ping返回异常状态码' + str(connection_status) + '。**')
		air_led_switch(0)
		return -1
		
		
		
		
if __name__=='__main__':
	'''
########################################################################################
				登录校园网
########################################################################################
	'''
	
	if login(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]) == -4:
		LOG.append('内网登录失败，自动重连中----------------')
		wan_reconnect()
		time.sleep(3)
		if login(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]) == -4:
			LOG.append('学号或者密码不正确，请检查！自动重连失败T^T')
		else:
			l = Login(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
			if l.connection_check() == 204:
				LOG.append('自动重连成功＾ω＾')
				led_flashing()
				
				
				
				
	'''
########################################################################################
				推送系统日志
########################################################################################
	'''
	
	login_log_info = "".join(LOG)
	os.system('logger -t login_log ==================================================================================================')
	os.system('logger -t login_log %s' %(login_log_info))
	os.system('logger -t login_log ==================================================================================================')
